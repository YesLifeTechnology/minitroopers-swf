// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "./"
  previewFeatures = ["nativeDistinct", "relationJoins"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Lang {
  en
  fr
  de
  es
  ru
  pt
}

model User {
  id                       String          @id @unique @db.Uuid
  lang                     Lang            @default(fr)
  name                     String          @db.VarChar(255)
  createdAt                DateTime        @default(now()) @db.Timestamptz()
  lastConnexion            DateTime        @default(now()) @db.Timestamptz()
  admin                    Boolean         @default(false)
  connexionToken           String          @db.Uuid
  gold                     Int             @default(0)
  power                    Int             @default(0)
  armyName                 String          @db.VarChar(255)
  armyUrl                  String          @db.VarChar(255) //to remove ?
  prefix                   Int             @default(0)
  color                    Int             @default(0) // 0~5
  sponsoredBy              User?           @relation("UserSponsor", fields: [sponsoredById], references: [id])
  sponsoredById            String?         @db.Uuid
  sponsoredUsers           User[]          @relation("UserSponsor")
  referralGold             Int             @default(100)
  ratsCount                Int             @default(0)
  infiltrationOpponentArmy String?         @db.Uuid
  infiltrationOpponentDate DateTime?
  troopers                 Trooper[]
  history                  HistoryUser[]
  ipAddressUser            ipAddressUser[]
  fights                   Fight[]
  missions                 Mission[]
  infiltrationUnlockAt     DateTime?       @db.Timestamptz
  exterminationUnlockAt    DateTime?       @db.Timestamptz
  epicUnlockAt             DateTime?       @db.Timestamptz
}

model ipAddressUser {
  id     String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  ip     String
}

enum HistoryType {
  creation
  war
  trooperAdd
  trooperUpdate
  trooperAvailable
  recruit
}

model HistoryUser {
  id      String      @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ts      DateTime    @default(now()) @db.Timestamptz()
  type    HistoryType
  options Json?
  user    User        @relation(fields: [userId], references: [id])
  userId  String      @db.Uuid
}

model Trooper {
  id           String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz()
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
  name         String   @db.VarChar(255)
  choices      Int[]
  group        Int
  seed         Int
  targetSystem Int      @default(0)
  targetType   Int      @default(0)
  reloadSystem Int      @default(2)
  moveSystem   Int      @default(1)
  CBody        Int      @default(0)
  CWeapon      Int? //null
}

model TrooperDay {
  id      String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String @db.VarChar(255)
  seed    Int
  choices Int[]
}

enum FightResult {
  win
  lose
}

model Fight {
  id                String      @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user              User        @relation(fields: [userId], references: [id])
  userId            String      @db.Uuid
  ts                DateTime    @default(now()) @db.Timestamptz()
  userName          String
  userPrefix        Int
  opponentName      String
  opponentPrefix    Int
  fightInputSWFData String
  result            FightResult
}

enum MissionType {
  exterminate
  infiltrate
  epic
}

model Mission {
  id                  String      @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                User        @relation(fields: [userId], references: [id])
  userId              String      @db.Uuid
  ts                  DateTime    @default(now()) @db.Timestamptz()
  type                MissionType
  missionInputSWFData String
  result              FightResult
}
